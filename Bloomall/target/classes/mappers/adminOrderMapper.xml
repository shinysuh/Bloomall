<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.bloomall.mappers.AdminOrderMapper">

	<!-- 존재하는 주문번호 가져오기(목록) -->
	<select id="getOrdIDX" resultType="int">
		select ord_idx
		from order_tb
		order by ord_idx desc
	</select>

	<!-- 주문목록 OrderHistoryVO -->
	<!-- 어차피 주문목록에는 해당주문 중 한개의 상품명만 표시할 것. 따라서 모든 상품 데이터를 가져갈 필요는 없다.
		 상품번호가 가장 큰 상품명만 노출되도록 하나만 가져가기 -->
	<select id="orderList" resultType="AdminOrderListVO" parameterType="Map">
		select ord_idx, prd_title, prd_price, ord_tot_price, mem_id, ord_recp_name, ord_date, ord_state, mem_name
	from(
	    select x.ord_idx, p.prd_title, p.prd_price, x.ord_tot_price, x.mem_id, x.ord_recp_name, x.ord_date, x.ord_state, p.prd_company, m.mem_name,
	                 row_number() over(order by x.ord_idx desc) o_seq
	    from (select o.ord_idx, o.ord_tot_price, o.mem_id, o.ord_recp_name, o.ord_date, o.ord_state
	         , (select max(d.prd_idx) from ORD_DETAIL_TB d where o.ord_idx = d.ord_idx) a
	        from order_tb o) x
	            inner join product_tb p
	                on p.prd_idx = x.a
	            inner join member_tb m
	                on m.mem_id = x.mem_id
	                <include refid="search" />
	            order by x.ord_idx desc
	        )
		where o_seq between #{cri.rowStart} and #{cri.rowEnd}
	</select>
	
	<sql id="search">
		<if test="searchType != null">
			<if test="searchType == 'orderNum'.toString()">
				where o.ord_idx = #{keyword}
			</if>		
			<if test="searchType == 'memId'.toString()">
				where o.mem_id like '%' || #{keyword} || '%' 
			</if>	
			<if test="searchType == 'memName'.toString()">
				where m.mem_name like '%' || #{keyword} || '%'
			</if>
			<if test="searchType == 'state'.toString()">
				where o.ord_state like '%' || #{keyword} || '%'
			</if>
			<if test="searchType == 'company'.toString()">
				where p.prd_company like '%' || #{keyword} || '%'
			</if>
		</if>
	</sql>
	
	<!-- 총 주문개수 -->
	<select id="orderTotal" resultType="int"  parameterType="SearchCriteria">
		select count(ord_idx)
		from (select x.ord_idx
			  from (select o.ord_idx, o.mem_id, (select max(d.prd_idx) from ORD_DETAIL_TB d where o.ord_idx = d.ord_idx) a
			        from order_tb o) x
			        inner join product_tb p
			            on p.prd_idx = x.a
			        inner join member_tb m
			            on m.mem_id = x.mem_id
			    <include refid="search" />)
	</select>
	
	
	<!-- 주문 당 주문상품 종류 개수 -->
	<select id="productCount" resultType="int" parameterType="int">
		select count(p.prd_idx)
		from order_tb o inner join ord_detail_tb d
		    on o.ord_idx = d.ord_idx
		inner join product_tb p
		    on p.prd_idx = d.prd_idx
		where o.ord_idx = #{ord_idx}
	</select>
	
	
	<!-- 주문상태 변경 -->
	<update id="updateState" parameterType="map">
		update order_tb set ord_state=#{ord_state}
		where ord_idx = #{ord_idx}
	</update>
	
	
	<!-- 주문정보 상세 페이지 [수정] -->
	<!-- 1)수령자정보/주문처리상태 수정 (주문테이블) -->
	<update id="updateRecipientAndState" parameterType="OrderVO">
		update order_tb
		set ord_recp_name=#{ord_recp_name}, ord_recp_tel=#{ord_recp_tel}, ord_recp_zip=#{ord_recp_zip},
		    ord_recp_addr=#{ord_recp_addr}, ord_recp_addr_d=#{ord_recp_addr_d}, ord_state=#{ord_state}
		where ord_idx=#{ord_idx}
	</update>
	
	<!-- 2)상품별 수량 수정 (주문상세테이블) -->
	<update id="updateAmount" parameterType="map">
		update ord_detail_tb set ord_amount=#{ord_amount}
		where ord_idx=#{ord_idx} and prd_idx=#{prd_idx}
	</update>
	
	
	<!-- 주문정보 상세 페이지 [삭제] -->
	<!-- 1)주문상세테이블 삭제 -->
	<delete id="deleteDetail" parameterType="int">
		delete from ord_detail_tb
		where ord_idx=#{ord_idx}
	</delete>
	<!-- 2)주문테이블 삭제 -->
	<delete id="deleteOrder" parameterType="int">
		delete from order_tb
		where ord_idx=#{ord_idx}
	</delete>

</mapper>